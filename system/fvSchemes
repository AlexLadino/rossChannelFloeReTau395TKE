/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  3.0.1                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default       backward; // CrankNicolson  0.5; steadyState;
}

gradSchemes
{
    default       Gauss linear; // fourth; // Gauss linear; // Gauss linear;
}

// pimple/piso DNS-LES
divSchemes
{
    default                       	none;
    div(phi,U)                    	Gauss linear;
    div(phi,k)                    	Gauss limitedLinear 1;
    div(phi,omega)                	Gauss limitedLinear 1;     
    div(phi,epsilon)              	Gauss limitedLinear 1;
    div(B)                          Gauss linear; 
    div((nuEff*dev2(T(grad(U))))) 	Gauss linear;
    div(phi,RMean)        	      Gauss linear;
    div(phi,R)                      Gauss linear;
    div(R)                          Gauss linear;
    div(nonlinearStress)            Gauss linear;
    div(div(phi,U))                 Gauss linear;
    div((nu*dev2(T(grad(U)))))      Gauss linear;  
}
/*
// simple Almost 2nd order
divSchemes
{
    default                       none;
    div(phi,U)                    bounded Gauss linearUpwind grad(U);
    div(phi,k)                    bounded Gauss limitedLinear 1;
    div(phi,epsilon)              bounded Gauss limitedLinear 1;
    div(phi,omega)                bounded Gauss limitedLinear 1;
    div(phi,v2)                   bounded Gauss limitedLinear 1;
    div((nuEff*dev2(T(grad(U))))) Gauss linear;
    div(nonlinearStress)          Gauss linear;
    div(div(phi,U))               Gauss linear;
}
*/
/*
// simple Robust Upwind
divSchemes
{
      default         none;
      div(phi,U)                    bounded Gauss linearUpwind grad(U);      
      div(phi,k)                    bounded Gauss upwind;
      div(phi,epsilon)              bounded Gauss upwind;
      div(phi,omega)                bounded Gauss upwind;
      div(phi,v2)                   bounded Gauss upwind;
      div(phi,R)                    bounded Gauss upwind;
      div(phi,nuTilda)              bounded Gauss upwind;
      div(R)                        Gauss linear;
      div(nonlinearStress)          Gauss linear;    
      div((nuEff*dev2(T(grad(U))))) Gauss linear;
      div(div(phi,U))               Gauss linear;
      
}
*/
laplacianSchemes
{
    default         Gauss linear limited 1;
}

interpolationSchemes
{
    default         linear;
}

snGradSchemes
{
    default         corrected;
}

fluxRequired
{
    default         no;
    p               ;
}

wallDist
{
    method meshWave;
}


// ************************************************************************* //
