/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  4.x                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/

/*
vorticity //wallShearStress
{
      // Function object enabled flag
      enabled         true;
      type        vorticity;
      libs        ("libfieldFunctionObjects.so");
      executeControl  timeStep;
      executeInterval   10;
      writeControl    none; // writeTime, none
      writeInterval     10;      
}

enstrophy //wallShearStress
{
      // Function object enabled flag
      enabled         true;
      type        enstrophy;
      libs        ("libfieldFunctionObjects.so");
      executeControl  timeStep;
      executeInterval   10;
      writeControl    none; // writeTime, none
      writeInterval     10;      
}

Q //wallShearStress
{
      // Function object enabled flag
      enabled         true;
      type        Q;
      libs        ("libfieldFunctionObjects.so");
      executeControl  timeStep;
      executeInterval   10;
      writeControl    none; // writeTime, none
      writeInterval     10;      
}    
*/

fieldAverageSecondaryFields1
{
      // Type of functionObject
      type            fieldAverage;

      // Where to load it from (if not already in solver)
      libs ("libfieldFunctionObjects.so");

      enabled   true; // Function object enabled flag

      // writeInterval 1;(Escriba los Mean cada vez que se escriba a disco)
      // writeInterval 2;(Escriba los Mean cada dos veces que se escriba a disco)
      // writeInterval 3;(Escriba los Mean cada tres veces que se escriba a disco)
      writeControl    writeTime; // none; timeStep; writeTime; outputTime
      writeInterval   1;          

      // critero de ejecucion timeStep (segun paso de tiempo)
      // 1: Calcule Averages cada paso de tiempo, 2: cada dos pasos, 3: cada tres pasos ...
      // Debe sincronizarse el executeInterval con el writeInterval de escritura de resultados
      executeControl timeStep; // none; timeStep; writeTime; outputTime
      executeInterval 1; 

      periodicRestart     false; // reinicie promedio periodicamente
      restartPeriod       0.07; // reinicie el promedio cada 0.008s

      restartOnRestart   false; // reinicie averages al reiniciar solucion

      // Fields to be averaged - runTime modifiable
      fields
      (

            enstrophy
            {
                  mean on;
                  prime2Mean off;
                  base time;
                  /*
                  window          10.0;   // ventana para promedio media movil
                  windowName      w1;     // nombre de la ventana para varias
                  */            
            }   
               
            Q
            {
                  mean on;
                  prime2Mean off;
                  base time;
                  /*
                  window          10.0;   // ventana para promedio media movil
                  windowName      w1;     // nombre de la ventana para varias
                  */
            }   
      );
}

    // Important: Computes time averaged fields (Umean and Urms)
    // TODO: review detailed - how to use for a given time?
    // Case1. Only compute at a point, 
    // fieldAverage from t1 to t2 for mean field in a given time interval
    // Integrate every timestep with window: media-movil.

// ************************************************************************* //
